data1 <- mvrnorm(n = 500, rep(0, 2), sigma)
data2 <- mvrnorm(n = 500, rep(3, 2), sigma)
data <- rbind(data1,data2)
rf <- randomForest(data)
prox <- rf$proximity
clusters <- pam(prox, 3)
data <- as.data.frame(data)
data$cluster <- as.numeric(clusters$clustering)
ggplot(data,aes(x=V1,y=V2,color=cluster))+geom_point() #+labs(title = "Data points")
X1 <- runif(ndata, min = 0, max = 1)
X2 <- runif(ndata, min = 0, max = 1)
data <- data.frame(X1,X2)
data <- data %>% mutate( X12 = 0.5 * (X1 - X2), Y = ifelse(X12>=0,1,0)  )
data <- data  %>% select(-X12) %>%  mutate( Y = as.factor(as.character(Y) ))
sigma <- matrix(c(1,0,0,1),2,2)
data1 <- mvrnorm(n = 500, rep(0, 2), sigma)
data2 <- mvrnorm(n = 500, rep(3, 2), sigma)
data <- rbind(data1,data2)
rf <- randomForest(data)
prox <- rf$proximity
clusters <- pam(prox, 2)
data <- as.data.frame(data)
data$cluster <- as.numeric(clusters$clustering)
ggplot(data,aes(x=V1,y=V2,color=cluster))+geom_point() #+labs(title = "Data points")
sigma <- matrix(c(1,0,0,1),2,2)
data1 <- mvrnorm(n = 500, rep(0, 2), sigma)
data2 <- mvrnorm(n = 500, rep(3, 2), sigma)
data <- rbind(data1,data2)
rf <- randomForest(data)
prox <- rf$proximity
clusters <- pam(prox, 2)
data <- as.data.frame(data)
data$cluster <- as.character(clusters$clustering)
ggplot(data,aes(x=V1,y=V2,color=cluster))+geom_point() #+labs(title = "Data points")
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
target_indx <- which( colnames(data) == "DX_bl" )
data[,target_indx] <- as.factor(paste0("c", data[,target_indx]))
rm_indx <-  which( colnames(data) %in% c("ID","TOTAL13","MMSCORE") )
data <- data[,-rm_indx]
results <- NULL
for( inodesize in c(1,5,10,20,50,75,100)  ){
for(i in 1:20){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., ntree = 100, nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c(inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
colnames(results) <- c("min_node_size","error")
results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size)) +
geom_point(size=3)
results <- NULL
for( inodesize in c(1,5,10,20,50,75,100)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., ntree = 100, nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c(inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
colnames(results) <- c("min_node_size","error")
results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size)) +
geom_point(size=3)
results <- NULL
for( inodesize in c(1,20,40,60,80)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., ntree = 100, nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c(inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
colnames(results) <- c("min_node_size","error")
results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size)) +
geom_point(size=3)
err.mat
results
results$type <- "CV_Error"
results
results.oob <- NULL
for( inodesize in c(1,20,40,60,80)  ){
for(i in 1:50){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results.oob <- rbind(results.oob, c(inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
}
results.oob <- NULL
for( inodesize in c(1,20,40,60,80)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results.oob <- rbind(results.oob, c(inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results.oob) <- c("min_node_size","error")
results.oob$type <- "OOB_Error
""
"
results.oob <- NULL
for( inodesize in c(1,20,40,60,80)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results.oob <- rbind(results.oob, c(inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results.oob) <- c("min_node_size","error")
results.oob$type <- "OOB_Error"
results.oob <- NULL
for( inodesize in c(1,20,40,60,80)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results.oob <- rbind(results.oob, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results.oob) <- c("type","min_node_size","error")
results.oob
results
results
results <- NULL
for( inodesize in c(1,20,40,60,80)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
for( inodesize in c(1,20,40,60,80)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results <- rbind(results, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
summary(results)
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size)) +
geom_point(size=3)
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, type = type)) +
geom_point(size=3)
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
results <- NULL
for( inodesize in c(1,50,100,150,200)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
for( inodesize in c(1,50,100,150,200)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results <- rbind(results, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
results
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
target_indx <- which( colnames(data) == "DX_bl" )
data[,target_indx] <- as.factor(paste0("c", data[,target_indx]))
rm_indx <-  which( colnames(data) %in% c("ID","TOTAL13","MMSCORE") )
data <- data[,-rm_indx]
results <- NULL
for( inodesize in c(1,50,100,150,200)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
for( inodesize in c(1,50,100,150,200)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results <- rbind(results, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
#results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
#levels( results$min_node_size ) <- unique( results$min_node_size  )
#results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
target_indx <- which( colnames(data) == "DX_bl" )
data[,target_indx] <- as.factor(paste0("c", data[,target_indx]))
rm_indx <-  which( colnames(data) %in% c("ID","TOTAL13","MMSCORE") )
data <- data[,-rm_indx]
results <- NULL
for( inodesize in c(1,50,100,150)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
for( inodesize in c(1,50,100,150)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results <- rbind(results, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
#results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
#levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
rf$err.rate
rf$err.rate[,"OOB"]
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
results <- NULL
for( inodesize in c(1,50,100,150)  ){
for(i in 1:50){
train.ix <- sample(nrow(data),floor( 2*nrow(data)/3) )
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", inodesize, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
for( inodesize in c(1,50,100,150)  ){
rf <- randomForest( DX_bl ~ ., nodesize = inodesize, data = data )
results <- rbind(results, c("OOB_Error",inodesize, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
#results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
#levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
---
title: 'R-Lab: Random Forests OOB Error'
output:
html_document: default
word_document: default
---
```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.path='Figs/', tidy = TRUE, warning=FALSE, message=FALSE)
```
We apply random forests to the re-admission data and the out-of-bag (OOB) error can be obtained. Random forests are run 50 times. Separately, we use 63/100 of the data for training random forests and use the rest 37/100 data to get testing error (referred to as the validation error), so the testing instances prportionis similar to the random forests OOB samples. This is repeated 50 times as well. The error rates from both methods are plotted in the boxplots below. It can be seen the average error from both methods are similar, but the OOB error seems to have less variance compared to the validation error.
```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
target_indx <- which( colnames(data) == "DX_bl" )
data[,target_indx] <- as.factor(paste0("c", data[,target_indx]))
rm_indx <-  which( colnames(data) %in% c("ID","TOTAL13","MMSCORE") )
data <- data[,-rm_indx]
para.v <- c(1,50,100,150,200)
results <- NULL
# CV error
for( ipara in para.v  ){
for(i in 1:50){
train.ix <- sample( nrow(data), floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("CV_Error", ipara, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
# training error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
pred <- predict(rf, data,type="class")
this.err <-  length(which(pred!= data$DX_bl))/length(pred)
results <- rbind( results, c("Training_Error", ipara, this.err)  )
}
# OOB error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
#results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
#levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
# OOB error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_500trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
#results <- as.data.frame(results) %>% mutate(min_node_size=as.character(min_node_size))
#levels( results$min_node_size ) <- unique( results$min_node_size  )
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
?randomForest
para.v <- c(1,50,100,150,200)
results <- NULL
# CV error
for( ipara in para.v  ){
for(i in 1:50){
train.ix <- sample( nrow(data), floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("Validation_Error", ipara, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
# training error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
pred <- predict(rf, data,type="class")
this.err <-  length(which(pred!= data$DX_bl))/length(pred)
results <- rbind( results, c("Training_Error", ipara, this.err)  )
}
# OOB error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_500trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
# OOB error with 50 trees
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, ntree= 50, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_50trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
ggplot() +
geom_boxplot(data = results %>% filter(type %in% c("OOB_Error_500trees","OOB_Error_50trees") ), aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
para.v <- c(1,50,100,150,200)
results <- NULL
# OOB error with 500 trees
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, ntree = 500, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_500trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
# OOB error with 50 trees
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, ntree= 50, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_50trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
ggplot() +
geom_boxplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_point(size=3)
ggplot() +
geom_bar()(data = results, aes(y = error, x = min_node_size, color = type))
ggplot() +
geom_bar(data = results, aes(y = error, x = min_node_size, color = type))
results
ggplot(data = results, aes(y = error, x = min_node_size, color = type)) +
geom_bar(colour="black", stat="identity")
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(colour="black", stat="identity")
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(colour="black", stat="identity") + guides(fill=FALSE)
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(stat="identity")
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar()
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(stat="identity")
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(stat="identity",aes(fill=type))
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(stat="identity",position="dodge")
para.v <- c(1,50,100,150,200)
results <- NULL
# OOB error with 500 trees
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, ntree = 500, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_500trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
# OOB error with 50 trees
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, ntree= 50, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error_50trees",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
results$min_node_size <- factor( results$min_node_size , unique( results$min_node_size  )  )
ggplot(data = results, aes(y = error, x = min_node_size, fill = type)) +
geom_bar(stat="identity",position="dodge")
library(dplyr)
library(tidyr)
library(ggplot2)
require(randomForest)
set.seed(1)
theme_set(theme_gray(base_size = 15) )
library(RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD.csv"))
target_indx <- which( colnames(data) == "DX_bl" )
data[,target_indx] <- as.factor(paste0("c", data[,target_indx]))
rm_indx <-  which( colnames(data) %in% c("ID","TOTAL13","MMSCORE") )
data <- data[,-rm_indx]
para.v <- c(1,50,100,150,200)
results <- NULL
# OOB error
for( ipara in para.v ){
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data )  # nodesize = inodesize
results <- rbind(results, c("OOB_Error",ipara, mean(rf$err.rate[,"OOB"]) ) )
}
colnames(results) <- c("type","min_node_size","error")
results <- as.data.frame(results)
results$error = as.numeric(as.character(results$error))
results
results
# Validation error
for( ipara in para.v  ){
for(i in 1:50){
train.ix <- sample( nrow(data), floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data[train.ix,] )
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
results <- rbind( results, c("Validation_Error", ipara, this.err)  )
# err.rf <- c(err.rf, length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test) )
}
}
train.ix <- sample( nrow(data), floor( nrow(data)/2) )
rf <- randomForest( DX_bl ~ ., nodesize = ipara, data = data[train.ix,] )
rf
pred.test <- predict(rf, data[-train.ix,],type="class")
this.err <-  length(which(pred.test != data[-train.ix,]$DX_bl))/length(pred.test)
this.err
results
results
c("Validation_Error", ipara, this.err)
results <- rbind( results, c("Validation_Error", ipara, this.err)  )
